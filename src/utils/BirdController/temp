 if(this._input._keys.flyToTree) {

            const controlObject = this._model;

            const target = new three.Vector3(this._input._params.target.x, this._high, this._input._params.target.z);
            const position = this._position; // vec3
            const movDirection = new three.Vector3().subVectors(target, position).normalize();

            /*const _R = controlObject.quaternion.clone();
            const _T = movDirection.clone();
            let _A = new three.Vector3(0,0,1).applyQuaternion(_R);
            const _Q = new three.Quaternion().setFromUnitVectors(_A, _T);
            _R.multiply(_Q);*/

            const _R = this._model.quaternion.clone()
            const _D = new three.Vector3(0,0,1).applyQuaternion(_R);
            if(!this._input._params.targetQuaternion) {
                const _Q = new three.Quaternion().setFromUnitVectors(_D, movDirection);
                this._input._params.targetQuaternion = _Q.clone();
            }

            controlObject.position.add(movDirection.multiplyScalar(this._velocity));
            controlObject.quaternion.copy(this._input._params.targetQuaternion);
            this._position.copy(controlObject.position);

        }